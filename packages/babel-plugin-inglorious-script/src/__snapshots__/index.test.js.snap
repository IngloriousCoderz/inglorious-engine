// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`it should handle chained additions 1`] = `
"import { sum as _sum, sum as _sum2 } from "@inglorious/utils/math/vectors.js";
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const v2 = v(3, 4);
const v3 = v(5, 6);
const result = Array.from(_sum(new Float32Array(Array.from(_sum2(new Float32Array(v1), new Float32Array(v2)))), new Float32Array(v3)));"
`;

exports[`it should handle direct v() calls 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { v } from '@inglorious/utils/v.js';
const result = Array.from(_sum(new Float32Array(v(1, 2)), new Float32Array(v(3, 4))));"
`;

exports[`it should handle imported vectors 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { v } from '@inglorious/utils/v.js';
import { initialPosition } from './vectors.js';
const result = Array.from(_sum(new Float32Array(initialPosition), new Float32Array(v(1, 2))));"
`;

exports[`it should handle mixed addition and scaling 1`] = `
"import { scale as _scale } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const v2 = v(3, 4);
const s = 2;
const result = Array.from(_sum(new Float32Array(v1), new Float32Array(Array.from(_scale(new Float32Array(v2), s)))));"
`;

exports[`it should not transform vector * vector multiplication 1`] = `
"import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const v2 = v(3, 4);
const result = v1 * v2;"
`;

exports[`it should trace variable declarations 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { v } from '@inglorious/utils/v.js';
const pos = v(1, 2);
const vel = v(3, 4);
const newPos = Array.from(_sum(new Float32Array(pos), new Float32Array(vel)));"
`;

exports[`it should transform scalar * vector multiplication 1`] = `
"import { scale as _scale } from "@inglorious/utils/math/vector.js";
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const s = 2;
const result = Array.from(_scale(new Float32Array(v1), s));"
`;

exports[`it should transform vector * scalar multiplication 1`] = `
"import { scale as _scale } from "@inglorious/utils/math/vector.js";
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const s = 2;
const result = Array.from(_scale(new Float32Array(v1), s));"
`;

exports[`it should transform vector + vector addition 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const v2 = v(3, 4);
const result = Array.from(_sum(new Float32Array(v1), new Float32Array(v2)));"
`;
