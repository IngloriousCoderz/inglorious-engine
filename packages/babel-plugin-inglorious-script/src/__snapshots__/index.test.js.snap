// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`it should handle array element assignment 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
import { v } from '@inglorious/utils/v.js';
const positions = [v(0, 0), v(1, 1)];
const velocity = v(1, 2);
positions[0] = __vectorSum(positions[0], velocity);"
`;

exports[`it should handle assignment to object properties 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
import { v } from '@inglorious/utils/v.js';
const obj = {
  pos: v(0, 0)
};
const velocity = v(1, 2);
obj.pos = __vectorSum(obj.pos, velocity);"
`;

exports[`it should handle chained additions 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const v2 = v(3, 4);
const v3 = v(5, 6);
const result = __vectorSum(__vectorSum(v1, v2), v3);"
`;

exports[`it should handle chaining with division 1`] = `
"import { isVector as _isVector, divide as _divide, isVector as _isVector2 } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
function __vectorDivide(a, b) {
  if (a && _isVector2(a) && typeof b === "number") return _divide(a, b);
  return a / b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(10, 20);
const v2 = v(1, 2);
const result = __vectorSum(__vectorDivide(v1, 2), v2);"
`;

exports[`it should handle chaining with modulus 1`] = `
"import { isVector as _isVector, mod as _mod, isVector as _isVector2 } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
function __vectorMod(a, b) {
  if (a && _isVector2(a) && typeof b === "number") return _mod(a, b);
  return a % b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(15, 25);
const v2 = v(1, 2);
const result = __vectorSum(__vectorMod(v1, 10), v2);"
`;

exports[`it should handle chaining with unary minus 1`] = `
"import { isVector as _isVector, scale as _scale, isVector as _isVector2 } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
function __vectorScale(a, b) {
  if (a && _isVector2(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector2(b)) return _scale(b, a);
  return a * b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const v2 = v(3, 4);
const result = __vectorSum(__vectorScale(v1, -1), v2);"
`;

exports[`it should handle complex mixed operations 1`] = `
"import { isVector as _isVector2, scale as _scale, isVector as _isVector3 } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { mod as _mod, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorMod(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _mod(a, b);
  return a % b;
}
function __vectorSum(a, b) {
  if (a && _isVector2(a) && b && _isVector2(b)) return _sum(a, b);
  return a + b;
}
function __vectorScale(a, b) {
  if (a && _isVector3(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector3(b)) return _scale(b, a);
  return a * b;
}
import { v } from '@inglorious/utils/v.js';
const position = v(10, 20);
const velocity = v(1, 2);
const dt = 0.16;
const worldSize = 100;
const newPosition = __vectorMod(__vectorSum(position, __vectorScale(velocity, dt)), worldSize);"
`;

exports[`it should handle direct v() calls 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
import { v } from '@inglorious/utils/v.js';
const result = __vectorSum(v(1, 2), v(3, 4));"
`;

exports[`it should handle function call results in vector operations 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
import { v } from '@inglorious/utils/v.js';
function getVec() {
  return v(1, 2);
}
function getScalar() {
  return 5;
}
const result = __vectorSum(getVec() * getScalar(), v(3, 4));"
`;

exports[`it should handle imported vectors 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
import { v } from '@inglorious/utils/v.js';
import { initialPosition } from './vectors.js';
const result = __vectorSum(initialPosition, v(1, 2));"
`;

exports[`it should handle mixed addition and scaling 1`] = `
"import { isVector as _isVector, scale as _scale, isVector as _isVector2 } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
function __vectorScale(a, b) {
  if (a && _isVector2(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector2(b)) return _scale(b, a);
  return a * b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const v2 = v(3, 4);
const s = 2;
const result = __vectorSum(v1, __vectorScale(v2, s));"
`;

exports[`it should handle mixed vector/scalar operations in complex expressions 1`] = `
"import { isVector as _isVector2, scale as _scale, isVector as _isVector3 } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { subtract as _subtract } from "@inglorious/utils/math/vectors.js";
function __vectorSubtract(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _subtract(a, b);
  return a - b;
}
function __vectorSum(a, b) {
  if (a && _isVector2(a) && b && _isVector2(b)) return _sum(a, b);
  return a + b;
}
function __vectorScale(a, b) {
  if (a && _isVector3(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector3(b)) return _scale(b, a);
  return a * b;
}
import { v } from '@inglorious/utils/v.js';
const a = v(1, 2);
const b = 3;
const c = v(4, 5);
const result = __vectorSubtract(__vectorSum(a, __vectorScale(b, c)), 2);"
`;

exports[`it should handle nested expressions 1`] = `
"import { isVector as _isVector3 } from "@inglorious/utils/math/vector.js";
import { subtract as _subtract } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector, scale as _scale, isVector as _isVector2 } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
function __vectorScale(a, b) {
  if (a && _isVector2(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector2(b)) return _scale(b, a);
  return a * b;
}
function __vectorSubtract(a, b) {
  if (a && _isVector3(a) && b && _isVector3(b)) return _subtract(a, b);
  return a - b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const v2 = v(3, 4);
const v3 = v(5, 6);
const result = __vectorSum(v1, __vectorScale(__vectorSubtract(v2, v3), 2));"
`;

exports[`it should handle vector operations with potentially undefined values 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
import { v } from '@inglorious/utils/v.js';
import { maybeVector, maybeScalar } from './utils.js';
const result = __vectorSum(maybeVector, maybeScalar);"
`;

exports[`it should trace variable declarations 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
import { v } from '@inglorious/utils/v.js';
const pos = v(1, 2);
const vel = v(3, 4);
const newPos = __vectorSum(pos, vel);"
`;

exports[`it should transform array element operations (runtime check) 1`] = `
"import { isVector as _isVector, scale as _scale, isVector as _isVector2 } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
function __vectorScale(a, b) {
  if (a && _isVector2(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector2(b)) return _scale(b, a);
  return a * b;
}
const numbers = [1, 2, 3];
numbers[0] = __vectorSum(numbers[0], 5);
numbers[1] = __vectorScale(numbers[1], 2);
const sum = __vectorSum(numbers[0], numbers[1]);"
`;

exports[`it should transform member expression operations (runtime check) 1`] = `
"import { isVector as _isVector, scale as _scale, isVector as _isVector2 } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
function __vectorScale(a, b) {
  if (a && _isVector2(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector2(b)) return _scale(b, a);
  return a * b;
}
const obj = {
  count: 5,
  speed: 10
};
obj.count = __vectorSum(obj.count, 3);
obj.speed = __vectorScale(obj.speed, 2);
const result = __vectorSum(obj.count, obj.speed);"
`;

exports[`it should transform scalar % vector (runtime check) 1`] = `
"import { mod as _mod, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorMod(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _mod(a, b);
  return a % b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const result = __vectorMod(5, v1);"
`;

exports[`it should transform scalar * vector multiplication 1`] = `
"import { scale as _scale, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorScale(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector(b)) return _scale(b, a);
  return a * b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const s = 2;
const result = __vectorScale(s, v1);"
`;

exports[`it should transform scalar / vector (runtime check) 1`] = `
"import { divide as _divide, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorDivide(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _divide(a, b);
  return a / b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const result = __vectorDivide(5, v1);"
`;

exports[`it should transform scalar - vector (runtime check) 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { subtract as _subtract } from "@inglorious/utils/math/vectors.js";
function __vectorSubtract(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _subtract(a, b);
  return a - b;
}
const result = __vectorSubtract(5, v(1, 2));"
`;

exports[`it should transform unary minus on vector 1`] = `
"import { scale as _scale, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorScale(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector(b)) return _scale(b, a);
  return a * b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const result = __vectorScale(v1, -1);"
`;

exports[`it should transform vector % scalar modulus 1`] = `
"import { mod as _mod, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorMod(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _mod(a, b);
  return a % b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(15, 25);
const s = 10;
const result = __vectorMod(v1, s);"
`;

exports[`it should transform vector %= scalar 1`] = `
"import { mod as _mod, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorMod(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _mod(a, b);
  return a % b;
}
import { v } from '@inglorious/utils/v.js';
let v1 = v(15, 25);
const s = 10;
v1 = __vectorMod(v1, s);"
`;

exports[`it should transform vector * scalar multiplication 1`] = `
"import { scale as _scale, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorScale(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector(b)) return _scale(b, a);
  return a * b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const s = 2;
const result = __vectorScale(v1, s);"
`;

exports[`it should transform vector *= scalar 1`] = `
"import { scale as _scale, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorScale(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector(b)) return _scale(b, a);
  return a * b;
}
import { v } from '@inglorious/utils/v.js';
let v1 = v(1, 2);
const s = 2;
v1 = __vectorScale(v1, s);"
`;

exports[`it should transform vector *= vector (runtime check) 1`] = `
"import { scale as _scale, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorScale(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _scale(a, b);
  if (typeof a === "number" && b && _isVector(b)) return _scale(b, a);
  return a * b;
}
import { v } from '@inglorious/utils/v.js';
let v1 = v(1, 2);
const v2 = v(3, 4);
v1 = __vectorScale(v1, v2);"
`;

exports[`it should transform vector + scalar (runtime check) 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
const result = __vectorSum(v(1, 2), 5);"
`;

exports[`it should transform vector + vector addition 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(1, 2);
const v2 = v(3, 4);
const result = __vectorSum(v1, v2);"
`;

exports[`it should transform vector += scalar (runtime check) 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
import { v } from '@inglorious/utils/v.js';
let v1 = v(1, 2);
v1 = __vectorSum(v1, 5);"
`;

exports[`it should transform vector += vector 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
function __vectorSum(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _sum(a, b);
  return a + b;
}
import { v } from '@inglorious/utils/v.js';
let v1 = v(1, 2);
const v2 = v(3, 4);
v1 = __vectorSum(v1, v2);"
`;

exports[`it should transform vector / scalar division 1`] = `
"import { divide as _divide, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorDivide(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _divide(a, b);
  return a / b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(10, 20);
const s = 2;
const result = __vectorDivide(v1, s);"
`;

exports[`it should transform vector /= scalar 1`] = `
"import { divide as _divide, isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorDivide(a, b) {
  if (a && _isVector(a) && typeof b === "number") return _divide(a, b);
  return a / b;
}
import { v } from '@inglorious/utils/v.js';
let v1 = v(10, 20);
const s = 2;
v1 = __vectorDivide(v1, s);"
`;

exports[`it should transform vector - vector subtraction 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { subtract as _subtract } from "@inglorious/utils/math/vectors.js";
function __vectorSubtract(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _subtract(a, b);
  return a - b;
}
import { v } from '@inglorious/utils/v.js';
const v1 = v(5, 6);
const v2 = v(1, 2);
const result = __vectorSubtract(v1, v2);"
`;

exports[`it should transform vector -= scalar (runtime check) 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { subtract as _subtract } from "@inglorious/utils/math/vectors.js";
function __vectorSubtract(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _subtract(a, b);
  return a - b;
}
import { v } from '@inglorious/utils/v.js';
let v1 = v(1, 2);
v1 = __vectorSubtract(v1, 5);"
`;

exports[`it should transform vector -= vector 1`] = `
"import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { subtract as _subtract } from "@inglorious/utils/math/vectors.js";
function __vectorSubtract(a, b) {
  if (a && _isVector(a) && b && _isVector(b)) return _subtract(a, b);
  return a - b;
}
import { v } from '@inglorious/utils/v.js';
let v1 = v(5, 6);
const v2 = v(1, 2);
v1 = __vectorSubtract(v1, v2);"
`;
