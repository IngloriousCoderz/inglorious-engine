// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`it should handle array element assignment 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
const positions = [_v(0, 0), _v(1, 1)];
const velocity = _v(1, 2);
positions[0] = __vectorSum(positions[0], velocity);"
`;

exports[`it should handle assignment to object properties 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
const obj = {
  pos: _v(0, 0)
};
const velocity = _v(1, 2);
obj.pos = __vectorSum(obj.pos, velocity);"
`;

exports[`it should handle chained additions 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
const v1 = _v(1, 2);
const v2 = _v(3, 4);
const v3 = _v(5, 6);
const result = __vectorSum(__vectorSum(v1, v2), v3);"
`;

exports[`it should handle chaining with division 1`] = `
"import { divide as _divide } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
function __vectorDivide(a, b) {
  if (_isVector(a) && !_isVector(b)) return _divide(a, b);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot divide two vectors.");
  if (!_isVector(a) && _isVector(b)) throw new Error("Cannot divide a non-vector by a vector.");
  return a / b;
}
const v1 = _v(10, 20);
const v2 = _v(1, 2);
const result = __vectorSum(__vectorDivide(v1, 2), v2);"
`;

exports[`it should handle chaining with modulus 1`] = `
"import { mod as _mod } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
function __vectorMod(a, b) {
  if (_isVector(a) && !_isVector(b)) return _mod(a, b);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot compute the modulus between two vectors.");
  if (!_isVector(a) && _isVector(b)) throw new Error("Cannot compute the modulus between a non-vector and a vector.");
  return a % b;
}
const v1 = _v(15, 25);
const v2 = _v(1, 2);
const result = __vectorSum(__vectorMod(v1, 10), v2);"
`;

exports[`it should handle chaining with unary minus 1`] = `
"import { scale as _scale } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
function __vectorScale(a, b) {
  if (_isVector(a) && !_isVector(b)) return _scale(a, b);
  if (!_isVector(a) && _isVector(b)) return _scale(b, a);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot multiply two vectors. Did you mean dot product (dot(v1, v2)) or cross product (cross(v1, v2))?");
  return a * b;
}
const v1 = _v(1, 2);
const v2 = _v(3, 4);
const result = __vectorSum(__vectorScale(v1, -1), v2);"
`;

exports[`it should handle complex mixed operations 1`] = `
"import { scale as _scale } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector, mod as _mod } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorMod(a, b) {
  if (_isVector(a) && !_isVector(b)) return _mod(a, b);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot compute the modulus between two vectors.");
  if (!_isVector(a) && _isVector(b)) throw new Error("Cannot compute the modulus between a non-vector and a vector.");
  return a % b;
}
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
function __vectorScale(a, b) {
  if (_isVector(a) && !_isVector(b)) return _scale(a, b);
  if (!_isVector(a) && _isVector(b)) return _scale(b, a);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot multiply two vectors. Did you mean dot product (dot(v1, v2)) or cross product (cross(v1, v2))?");
  return a * b;
}
const position = _v(10, 20);
const velocity = _v(1, 2);
const dt = 0.16;
const worldSize = 100;
const newPosition = __vectorMod(__vectorSum(position, __vectorScale(velocity, dt)), worldSize);"
`;

exports[`it should handle direct v() calls 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
const result = __vectorSum(_v(1, 2), _v(3, 4));"
`;

exports[`it should handle function call results in vector operations 1`] = `
"import { scale as _scale } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
function __vectorScale(a, b) {
  if (_isVector(a) && !_isVector(b)) return _scale(a, b);
  if (!_isVector(a) && _isVector(b)) return _scale(b, a);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot multiply two vectors. Did you mean dot product (dot(v1, v2)) or cross product (cross(v1, v2))?");
  return a * b;
}
function getVec() {
  return _v(1, 2);
}
function getScalar() {
  return 5;
}
const result = __vectorSum(__vectorScale(getVec(), getScalar()), _v(3, 4));"
`;

exports[`it should handle imported vectors 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
import { initialPosition } from './vectors.js';
const result = __vectorSum(initialPosition, _v(1, 2));"
`;

exports[`it should handle mixed addition and scaling 1`] = `
"import { scale as _scale } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
function __vectorScale(a, b) {
  if (_isVector(a) && !_isVector(b)) return _scale(a, b);
  if (!_isVector(a) && _isVector(b)) return _scale(b, a);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot multiply two vectors. Did you mean dot product (dot(v1, v2)) or cross product (cross(v1, v2))?");
  return a * b;
}
const v1 = _v(1, 2);
const v2 = _v(3, 4);
const s = 2;
const result = __vectorSum(v1, __vectorScale(v2, s));"
`;

exports[`it should handle nested expressions 1`] = `
"import { subtract as _subtract } from "@inglorious/utils/math/vectors.js";
import { scale as _scale } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
function __vectorScale(a, b) {
  if (_isVector(a) && !_isVector(b)) return _scale(a, b);
  if (!_isVector(a) && _isVector(b)) return _scale(b, a);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot multiply two vectors. Did you mean dot product (dot(v1, v2)) or cross product (cross(v1, v2))?");
  return a * b;
}
function __vectorSubtract(a, b) {
  if (_isVector(a) && _isVector(b)) return _subtract(a, b);
  if (!_isVector(a) && !_isVector(b)) return a - b;
  throw new Error("Cannot subtract a vector and a non-vector.");
}
const v1 = _v(1, 2);
const v2 = _v(3, 4);
const v3 = _v(5, 6);
const result = __vectorSum(v1, __vectorScale(__vectorSubtract(v2, v3), 2));"
`;

exports[`it should handle vector operations with potentially undefined values 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
import { maybeVector, maybeScalar } from './utils.js';
const result = __vectorSum(maybeVector, maybeScalar);"
`;

exports[`it should not transform unary plus on vector 1`] = `
"import { v as _v } from "@inglorious/utils/v.js";
const v1 = _v(1, 2);
const result = +v1;"
`;

exports[`it should trace variable declarations 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
const pos = _v(1, 2);
const vel = _v(3, 4);
const newPos = __vectorSum(pos, vel);"
`;

exports[`it should transform array element operations (runtime check) 1`] = `
"import { scale as _scale } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
function __vectorScale(a, b) {
  if (_isVector(a) && !_isVector(b)) return _scale(a, b);
  if (!_isVector(a) && _isVector(b)) return _scale(b, a);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot multiply two vectors. Did you mean dot product (dot(v1, v2)) or cross product (cross(v1, v2))?");
  return a * b;
}
const numbers = [1, 2, 3];
numbers[0] = __vectorSum(numbers[0], 5);
numbers[1] = __vectorScale(numbers[1], 2);
const sum = __vectorSum(numbers[0], numbers[1]);"
`;

exports[`it should transform member expression operations (runtime check) 1`] = `
"import { scale as _scale } from "@inglorious/utils/math/vector.js";
import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
function __vectorScale(a, b) {
  if (_isVector(a) && !_isVector(b)) return _scale(a, b);
  if (!_isVector(a) && _isVector(b)) return _scale(b, a);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot multiply two vectors. Did you mean dot product (dot(v1, v2)) or cross product (cross(v1, v2))?");
  return a * b;
}
const obj = {
  count: 5,
  speed: 10
};
obj.count = __vectorSum(obj.count, 3);
obj.speed = __vectorScale(obj.speed, 2);
const result = __vectorSum(obj.count, obj.speed);"
`;

exports[`it should transform scalar * vector multiplication 1`] = `
"import { isVector as _isVector, scale as _scale } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorScale(a, b) {
  if (_isVector(a) && !_isVector(b)) return _scale(a, b);
  if (!_isVector(a) && _isVector(b)) return _scale(b, a);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot multiply two vectors. Did you mean dot product (dot(v1, v2)) or cross product (cross(v1, v2))?");
  return a * b;
}
const v1 = _v(1, 2);
const s = 2;
const result = __vectorScale(s, v1);"
`;

exports[`it should transform unary minus on vector 1`] = `
"import { isVector as _isVector, scale as _scale } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorScale(a, b) {
  if (_isVector(a) && !_isVector(b)) return _scale(a, b);
  if (!_isVector(a) && _isVector(b)) return _scale(b, a);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot multiply two vectors. Did you mean dot product (dot(v1, v2)) or cross product (cross(v1, v2))?");
  return a * b;
}
const v1 = _v(1, 2);
const result = __vectorScale(v1, -1);"
`;

exports[`it should transform vector % scalar modulus 1`] = `
"import { isVector as _isVector, mod as _mod } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorMod(a, b) {
  if (_isVector(a) && !_isVector(b)) return _mod(a, b);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot compute the modulus between two vectors.");
  if (!_isVector(a) && _isVector(b)) throw new Error("Cannot compute the modulus between a non-vector and a vector.");
  return a % b;
}
const v1 = _v(15, 25);
const s = 10;
const result = __vectorMod(v1, s);"
`;

exports[`it should transform vector %= scalar 1`] = `
"import { isVector as _isVector, mod as _mod } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorMod(a, b) {
  if (_isVector(a) && !_isVector(b)) return _mod(a, b);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot compute the modulus between two vectors.");
  if (!_isVector(a) && _isVector(b)) throw new Error("Cannot compute the modulus between a non-vector and a vector.");
  return a % b;
}
let v1 = _v(15, 25);
const s = 10;
v1 = __vectorMod(v1, s);"
`;

exports[`it should transform vector * scalar multiplication 1`] = `
"import { isVector as _isVector, scale as _scale } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorScale(a, b) {
  if (_isVector(a) && !_isVector(b)) return _scale(a, b);
  if (!_isVector(a) && _isVector(b)) return _scale(b, a);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot multiply two vectors. Did you mean dot product (dot(v1, v2)) or cross product (cross(v1, v2))?");
  return a * b;
}
const v1 = _v(1, 2);
const s = 2;
const result = __vectorScale(v1, s);"
`;

exports[`it should transform vector ** scalar 1`] = `
"import { isVector as _isVector, power as _power } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorPower(a, b) {
  if (_isVector(a) && !_isVector(b)) return _power(a, b);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot raise a vector to the power of another vector.");
  if (!_isVector(a) && _isVector(b)) throw new Error("Cannot raise a non-vector by the power of a vector.");
  return a ** b;
}
const v1 = _v(1, 2);
const result = __vectorPower(v1, 2);"
`;

exports[`it should transform vector *= scalar 1`] = `
"import { isVector as _isVector, scale as _scale } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorScale(a, b) {
  if (_isVector(a) && !_isVector(b)) return _scale(a, b);
  if (!_isVector(a) && _isVector(b)) return _scale(b, a);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot multiply two vectors. Did you mean dot product (dot(v1, v2)) or cross product (cross(v1, v2))?");
  return a * b;
}
let v1 = _v(1, 2);
const s = 2;
v1 = __vectorScale(v1, s);"
`;

exports[`it should transform vector + vector addition 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
const v1 = _v(1, 2);
const v2 = _v(3, 4);
const result = __vectorSum(v1, v2);"
`;

exports[`it should transform vector += vector 1`] = `
"import { sum as _sum } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSum(a, b) {
  if (_isVector(a) && _isVector(b)) return _sum(a, b);
  if (!_isVector(a) && !_isVector(b)) return a + b;
  throw new Error("Cannot add a vector and a non-vector.");
}
let v1 = _v(1, 2);
const v2 = _v(3, 4);
v1 = __vectorSum(v1, v2);"
`;

exports[`it should transform vector / scalar division 1`] = `
"import { isVector as _isVector, divide as _divide } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorDivide(a, b) {
  if (_isVector(a) && !_isVector(b)) return _divide(a, b);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot divide two vectors.");
  if (!_isVector(a) && _isVector(b)) throw new Error("Cannot divide a non-vector by a vector.");
  return a / b;
}
const v1 = _v(10, 20);
const s = 2;
const result = __vectorDivide(v1, s);"
`;

exports[`it should transform vector /= scalar 1`] = `
"import { isVector as _isVector, divide as _divide } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorDivide(a, b) {
  if (_isVector(a) && !_isVector(b)) return _divide(a, b);
  if (_isVector(a) && _isVector(b)) throw new Error("Cannot divide two vectors.");
  if (!_isVector(a) && _isVector(b)) throw new Error("Cannot divide a non-vector by a vector.");
  return a / b;
}
let v1 = _v(10, 20);
const s = 2;
v1 = __vectorDivide(v1, s);"
`;

exports[`it should transform vector - vector subtraction 1`] = `
"import { subtract as _subtract } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSubtract(a, b) {
  if (_isVector(a) && _isVector(b)) return _subtract(a, b);
  if (!_isVector(a) && !_isVector(b)) return a - b;
  throw new Error("Cannot subtract a vector and a non-vector.");
}
const v1 = _v(5, 6);
const v2 = _v(1, 2);
const result = __vectorSubtract(v1, v2);"
`;

exports[`it should transform vector -= vector 1`] = `
"import { subtract as _subtract } from "@inglorious/utils/math/vectors.js";
import { isVector as _isVector } from "@inglorious/utils/math/vector.js";
import { v as _v } from "@inglorious/utils/v.js";
function __vectorSubtract(a, b) {
  if (_isVector(a) && _isVector(b)) return _subtract(a, b);
  if (!_isVector(a) && !_isVector(b)) return a - b;
  throw new Error("Cannot subtract a vector and a non-vector.");
}
let v1 = _v(5, 6);
const v2 = _v(1, 2);
v1 = __vectorSubtract(v1, v2);"
`;
